#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import network

# Read configuration from a JSON file or initialize it.
try:
    config = json.load(open("config.json"))
except FileNotFoundError:
    print(agent.SD_NOTICE, "Generating a new config.json file...", file=sys.stderr)
    config = {
        "interface": "",
        "dhcp-server": {
            "enabled": False,
            "start": "",
            "end": "",
            "lease": 12,
            "gateway": "",
        },
        "dns-server": {
            "enabled": False,
            "primary-server": "",
            "secondary-server": ""
        },
    }
    json.dump(config, fp=open("config.json", "w"))


# Lookup local Samba DCs. They want to bind DNS port 53 like us.
local_samba_dcs = network.get_local_samba_dcs()

# convert json to configuration file
with open("dnsmasq.d/00config.conf", "w") as file:
    file.write("# This file is automatically generated by NethServer, manual changes will be lost.\n")
    # write interface only if dhcp-server or dns-server are enabled
    if config["dhcp-server"]["enabled"] or config["dns-server"]["enabled"]:
        file.write("interface=" + config["interface"] + "\n")

    # write dhcp-server configuration
    if config["dhcp-server"]["enabled"]:
        file.write("dhcp-range=set:default," + config["dhcp-server"]["start"] + "," + config["dhcp-server"]["end"] + "," + str(config["dhcp-server"]["lease"]) + "h\n")
        if "gateway" in config["dhcp-server"] and config["dhcp-server"]["gateway"] != "":
            file.write("dhcp-option=tag:default,option:router," + config["dhcp-server"]["gateway"] + "\n")

    # write dns-server configuration, if no local Samba DC is present
    if len(local_samba_dcs) > 0:
        print("Local Active Directory DC found, DNS feature is blocked.", local_samba_dcs, file=sys.stderr)
        if 'interface' in config and config['interface'] != '':
            # retrieve the first network interface that matches the configuration, then get the first IP address provided
            interface = next(interface for interface in network.list_interfaces() if interface["name"] == config["interface"])
            file.write("dhcp-option=6," + interface["addresses"][0]["address"]
        file.write("port=0\n")
    elif config["dns-server"]["enabled"]:
        file.write("server=" + config["dns-server"]["primary-server"] + "\n")
        if config["dns-server"]["secondary-server"] != "":
            file.write("server=" + config["dns-server"]["secondary-server"] + "\n")
    else:
        # shut down dns server if not enabled
        file.write("port=0\n")
