#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys

import agent
import network

"""
Generate a host file from traefik that will be used to resolve reverse proxies.
"""
traefik_agent = sys.argv[1] if len(sys.argv) > 1 else None
# if traefik_agent is not set, try to resolve it
if traefik_agent is None:
    traefik_agent = agent.resolve_agent_id("traefik@node")
    if traefik_agent is None:
        raise RuntimeError("traefik agent not found")

# read dnsmasq configuration
config = json.load(open("config.json"))
if 'interface' in config and config['interface'] != '':
    # retrieve the first network interface that matches the configuration, then get the first IP address provided
    interface = next(interface for interface in network.list_interfaces() if interface["name"] == config["interface"])
    ip = interface["addresses"][0]["address"]
    # prepare redis to fetch the hosts
    redis_client = agent.redis_connect(use_replica=True)
    with open(f'dnsmasq_hosts.d/traefik_hosts', 'w') as file:
        file.write("# This file is automatically generated by NethServer, manual changes will be lost.\n")
        for host in redis_client.smembers(f'{traefik_agent}/hosts'):
            file.write(f'{ip} {host}\n')
