#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import subprocess
import os

import agent
import network

"""
Generate a host file from traefik that will be used to resolve CNAMEs
Then save all CNAMES in a config file for DNSMasq
"""

fqdn = subprocess.run(['hostname', '-f'], capture_output=True, text=True, check=True).stdout.strip()

config = json.load(open("config.json"))
if 'interface' in config and config['interface'] != '':
    # retrieve the first network interface that matches the configuration, then get the first IP address provided
    interface = next(interface for interface in network.list_interfaces() if interface["name"] == config["interface"])
    ip = interface["addresses"][0]["address"]
    # save a host file for dnsmasq, so that it can resolve the node fqdn
    with open(f'dnsmasq_hosts.d/00_node_hosts', 'w') as file:
        file.write('# This file is automatically generated by NethServer, manual changes will be lost.\n')
        file.write(f'{ip} {fqdn}\n')

    # save a new configuration file for dnsmasq, so that it can resolve the CNAMEs to the node fqdn
    redis_client = agent.redis_connect(use_replica=True)
    hosts = redis_client.smembers(f'{agent.resolve_agent_id("traefik@node")}/hosts')
    # if there are hosts, write them to the file
    with open("dnsmasq.d/01cnames.conf", "w") as file:
            file.write("# This file is automatically generated by NethServer, manual changes will be lost.\n")
            if len(hosts) > 0:
                file.write('cname=')
                for host in hosts:
                    file.write(f'{host},')
                file.write(f'{fqdn}\n')
